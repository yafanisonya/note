(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{376:function(t,e,a){"use strict";a.r(e);var n=a(42),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h4",{attrs:{id:"指令-directive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指令-directive"}},[t._v("#")]),t._v(" 指令 Directive")]),t._v(" "),a("div",{staticClass:"language-vue extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vue"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("v-text")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("v-html")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("以 v- 开头的东西就是指令")]),t._v(" "),a("ul",[a("li",[t._v("语法")])]),t._v(" "),a("blockquote",[a("p",[t._v("v-指令名：参数 = 值 ， 如 "),a("code",[t._v("v-on: click=add")])])]),t._v(" "),a("blockquote",[a("p",[t._v("如果值里没有特殊字符，则可以不加引号；\n有些指令没有参数和值， 如 "),a("code",[t._v("v-pre")]),t._v("；\n有些指令没有值，如"),a("code",[t._v("v-on:click.prevent")]),t._v("；")])]),t._v(" "),a("h4",{attrs:{id:"自定义指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义指令"}},[t._v("#")]),t._v(" 自定义指令")]),t._v(" "),a("blockquote",[a("p",[t._v("声明一个全局指令")])]),t._v(" "),a("p",[a("code",[t._v("Vue.directive('x',directiveOptions)")])]),t._v(" "),a("blockquote",[a("p",[t._v("声明一个局部指令")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('new Vue({\n  ...,\n  directives:{ "x" : directiveOptions }\n})\n')])])]),a("p",[a("code",[t._v("directiveOptions")]),t._v("五个函数属性：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("bind(el,info,vnode,oldVnode)")]),t._v("  类似created")]),t._v(" "),a("li",[a("code",[t._v("inserted(el,info,vnode,oldVnode)")]),t._v(" 类似mounted")]),t._v(" "),a("li",[a("code",[t._v("update(el,info,vnode,oldVnode)")]),t._v(" 类似updated")]),t._v(" "),a("li",[a("code",[t._v("componentUpdated(el,info,vnode,oldVnode)")])]),t._v(" "),a("li",[a("code",[t._v("unbind(el,info,vnode,oldVnode)")]),t._v(" 类似destroyed")])]),t._v(" "),a("h5",{attrs:{id:"指令的作用："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指令的作用："}},[t._v("#")]),t._v(" 指令的作用：")]),t._v(" "),a("ul",[a("li",[t._v("主要用于DOM操作("),a("code",[t._v("Vue")]),t._v("实例/组件用于数据绑定、事件监听、"),a("code",[t._v("DOM")]),t._v("更新，"),a("code",[t._v("Vue")]),t._v("指令用于"),a("code",[t._v("DOM")]),t._v("操作)")]),t._v(" "),a("li",[t._v("减少重复")])]),t._v(" "),a("div",{staticClass:"language-vue extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vue"}},[a("code",[t._v("new Vue({\n  directives: {\n    on2: {\n      // bind 可以改为 inserted\n      bind(el, info) {\n        el.addEventListener(info.arg, info.value);\n        // Vue 自带的 v-on 并不是这样实现的，它更复杂，用了事件委托\n      },\n      unbind(el, info) {\n        el.removeEventListener(info.arg, info.value);\n      }\n    }\n  },\n  template: `\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("button")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("v-on2:")]),t._v("click")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("hi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("点我"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("button")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v('\n  `,\n  methods: {\n    hi() {\n      console.log("hi");\n    }\n  }\n}).$mount("#app");\n')])])]),a("h3",{attrs:{id:"修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修饰符"}},[t._v("#")]),t._v(" 修饰符")]),t._v(" "),a("div",{staticClass:"language-vue extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vue"}},[a("code",[t._v('@click.stop = "add" 表示阻止事件传播/冒泡\n@click.prevent = "add" 表示阻止默认动作\n@click.stop.prevent = "add" 同时表示两种意思\n')])])]),a("p",[t._v("v-on支持的修饰符：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(".stop .prevent\n.{keycode | keyAlias}  .capture .self .once .passive .native\n快捷键相关 .ctrl .alt .shift .meta .exact\n鼠标相关 .left .right .middle\n")])])]),a("p",[t._v("v-bind 支持的修饰符：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(".sync .prop .camel \n")])])]),a("p",[t._v("v-model 支持的修饰符:\n"),a("code",[t._v(".lazy .number .trim")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('.lazy\n在默认情况下，v-model 在每次 input 事件触发后将输入框的值与数据进行同步 (除了上述输入法组合文字时)。你可以添加 lazy 修饰符，从而转为在 change 事件_之后_进行同步：\n\n\x3c!-- 在“change”时而非“input”时更新 --\x3e\n<input v-model.lazy="msg">\n\n\n.number\n如果想自动将用户的输入值转为数值类型，可以给 v-model 添加 number 修饰符：\n\n<input v-model.number="age" type="number">\n这通常很有用，因为即使在 type="number" 时，HTML 输入元素的值也总会返回字符串。如果这个值无法被 parseFloat() 解析，则会返回原始的值。\n\n.trim\n如果要自动过滤用户输入的首尾空白字符，可以给 v-model 添加 trim 修饰符：\n<input v-model.trim="msg">\n')])])]),a("h3",{attrs:{id:"sync-修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sync-修饰符"}},[t._v("#")]),t._v(" .sync 修饰符")]),t._v(" "),a("blockquote",[a("p",[t._v("组件不能修改 props 外部数据\n$emit 可以触发事件，并传参\n$event 可以获取$emit的参数")])]),t._v(" "),a("blockquote",[a("p",[t._v(".sync功能：当一个子组件改变了一个 prop 的值时，这个变化也会同步到父组件中；使用"),a("code",[t._v("update:myPropName")]),t._v(" 模式触发事件，实现双向绑定")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://codesandbox.io/s/small-leftpad-zzvpp",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码示例"),a("OutboundLink")],1)]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('//父组件代码\n<template>\n  <div class="app">\n    App.vue 我现在有 {{total}}\n    <hr>\n    <Child :money="total" v-on:update:money="total = $event"/>\n  </div>\n</template>\n\n<script>\nimport Child from "./Child.vue";\nexport default {\n  data() {\n    return { total: 10000 };\n  },\n  components: { Child: Child }\n};\n<\/script>\n\n<style>\n</style>\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('//子组件代码\n<template>\n  <div class="child">\n    {{money}}\n    <button @click="$emit(\'update:money\', money-100)">\n      <span>花钱</span>\n    </button>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: ["money"]\n};\n<\/script>\n\n<style>\n</style>\n')])])]),a("p",[t._v("在一个包含money prop 的假设的组件中，通过以下方式赋予新值：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$emit('update:money', money-100)\n// this.$emit 可以触发事件，并传参\n")])])]),a("p",[t._v("然后父组件可以监听事件并根据需要更新一个本地的数据属性")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(' <Child :money="total" v-on:update:money="total = $event"/>\n// $event 可以获取$emit的参数\n <Child :money="total" @update:money="total = $event"/>\n')])])]),a("p",[t._v("为了方便起见，这种模式可以缩写，即 .sync 修饰符：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(' <Child :money.sync="total"/>\n')])])])])}),[],!1,null,null,null);e.default=s.exports}}]);